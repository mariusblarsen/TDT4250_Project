/**
 * generated by Xtext 2.23.0
 */
package tdt4250.ganttproject.gpx.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.EcoreUtil;

import tdt4250.ganttproject.gpx.AbstractTask;
import tdt4250.ganttproject.gpx.Dependency;
import tdt4250.ganttproject.gpx.GpxPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dependency</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tdt4250.ganttproject.gpx.impl.DependencyImpl#getDependees <em>Dependees</em>}</li>
 *   <li>{@link tdt4250.ganttproject.gpx.impl.DependencyImpl#getDependant <em>Dependant</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DependencyImpl extends MinimalEObjectImpl.Container implements Dependency {
	/**
	 * The cached value of the '{@link #getDependees() <em>Dependees</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDependees()
	 * @generated
	 * @ordered
	 */
	protected EList<AbstractTask> dependees;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return GpxPackage.Literals.DEPENDENCY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<AbstractTask> getDependees() {
		if (dependees == null) {
			dependees = new EObjectResolvingEList<AbstractTask>(AbstractTask.class, this, GpxPackage.DEPENDENCY__DEPENDEES);
		}
		return dependees;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public AbstractTask getDependant() {
		if (eContainerFeatureID() != GpxPackage.DEPENDENCY__DEPENDANT) return null;
		return (AbstractTask)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetDependant(AbstractTask newDependant, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newDependant, GpxPackage.DEPENDENCY__DEPENDANT, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setDependant(AbstractTask newDependant) {
		if (newDependant != eInternalContainer() || (eContainerFeatureID() != GpxPackage.DEPENDENCY__DEPENDANT && newDependant != null)) {
			if (EcoreUtil.isAncestor(this, newDependant))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newDependant != null)
				msgs = ((InternalEObject)newDependant).eInverseAdd(this, GpxPackage.ABSTRACT_TASK__DEPENDENCY, AbstractTask.class, msgs);
			msgs = basicSetDependant(newDependant, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GpxPackage.DEPENDENCY__DEPENDANT, newDependant, newDependant));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDANT:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetDependant((AbstractTask)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDANT:
				return basicSetDependant(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case GpxPackage.DEPENDENCY__DEPENDANT:
				return eInternalContainer().eInverseRemove(this, GpxPackage.ABSTRACT_TASK__DEPENDENCY, AbstractTask.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDEES:
				return getDependees();
			case GpxPackage.DEPENDENCY__DEPENDANT:
				return getDependant();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDEES:
				getDependees().clear();
				getDependees().addAll((Collection<? extends AbstractTask>)newValue);
				return;
			case GpxPackage.DEPENDENCY__DEPENDANT:
				setDependant((AbstractTask)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDEES:
				getDependees().clear();
				return;
			case GpxPackage.DEPENDENCY__DEPENDANT:
				setDependant((AbstractTask)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GpxPackage.DEPENDENCY__DEPENDEES:
				return dependees != null && !dependees.isEmpty();
			case GpxPackage.DEPENDENCY__DEPENDANT:
				return getDependant() != null;
		}
		return super.eIsSet(featureID);
	}

} //DependencyImpl
