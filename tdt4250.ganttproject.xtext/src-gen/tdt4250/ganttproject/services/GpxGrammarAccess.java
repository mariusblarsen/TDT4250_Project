/*
 * generated by Xtext 2.23.0
 */
package tdt4250.ganttproject.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GpxGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTasksAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTasksAbstractTaskParserRuleCall_2_0_0 = (RuleCall)cTasksAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTasksAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTasksAbstractTaskParserRuleCall_2_1_1_0 = (RuleCall)cTasksAssignment_2_1_1.eContents().get(0);
		
		//Project:
		//	'Project' name=STRING (tasks+=AbstractTask (';' tasks+=AbstractTask)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' name=STRING (tasks+=AbstractTask (';' tasks+=AbstractTask)*)?
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//(tasks+=AbstractTask (';' tasks+=AbstractTask)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//tasks+=AbstractTask
		public Assignment getTasksAssignment_2_0() { return cTasksAssignment_2_0; }
		
		//AbstractTask
		public RuleCall getTasksAbstractTaskParserRuleCall_2_0_0() { return cTasksAbstractTaskParserRuleCall_2_0_0; }
		
		//(';' tasks+=AbstractTask)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_0() { return cSemicolonKeyword_2_1_0; }
		
		//tasks+=AbstractTask
		public Assignment getTasksAssignment_2_1_1() { return cTasksAssignment_2_1_1; }
		
		//AbstractTask
		public RuleCall getTasksAbstractTaskParserRuleCall_2_1_1_0() { return cTasksAbstractTaskParserRuleCall_2_1_1_0; }
	}
	public class AbstractTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.AbstractTask");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMilestoneParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractTask:
		//	Task | Milestone;
		@Override public ParserRule getRule() { return rule; }
		
		//Task | Milestone
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Task
		public RuleCall getTaskParserRuleCall_0() { return cTaskParserRuleCall_0; }
		
		//Milestone
		public RuleCall getMilestoneParserRuleCall_1() { return cMilestoneParserRuleCall_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLastsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDurationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_2_1_0 = (RuleCall)cDurationAssignment_2_1.eContents().get(0);
		private final Assignment cDurationUnitAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDurationUnitDURATION_UNITEnumRuleCall_2_2_0 = (RuleCall)cDurationUnitAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStartDateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStartDateDateParserRuleCall_3_1_0 = (RuleCall)cStartDateAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEndDateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEndDateDateParserRuleCall_4_1_0 = (RuleCall)cEndDateAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDependsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cOnKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cDependencyAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cDependencyDependencyParserRuleCall_5_3_0 = (RuleCall)cDependencyAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSubtasksAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSubtasksAbstractTaskParserRuleCall_6_1_0 = (RuleCall)cSubtasksAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cSubtasksAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cSubtasksAbstractTaskParserRuleCall_6_2_1_0 = (RuleCall)cSubtasksAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Task:
		//	'Task' name=STRING ('lasts' duration=INT durationUnit=DURATION_UNIT)? ('from' startDate=Date)? ('due' endDate=Date)?
		//	(','? 'depends' 'on' dependency=Dependency)? ('{'
		//	subtasks+=AbstractTask (';' subtasks+=AbstractTask)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=STRING ('lasts' duration=INT durationUnit=DURATION_UNIT)? ('from' startDate=Date)? ('due' endDate=Date)?
		//(','? 'depends' 'on' dependency=Dependency)? ('{' subtasks+=AbstractTask (';' subtasks+=AbstractTask)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('lasts' duration=INT durationUnit=DURATION_UNIT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'lasts'
		public Keyword getLastsKeyword_2_0() { return cLastsKeyword_2_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_2_1() { return cDurationAssignment_2_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_2_1_0() { return cDurationINTTerminalRuleCall_2_1_0; }
		
		//durationUnit=DURATION_UNIT
		public Assignment getDurationUnitAssignment_2_2() { return cDurationUnitAssignment_2_2; }
		
		//DURATION_UNIT
		public RuleCall getDurationUnitDURATION_UNITEnumRuleCall_2_2_0() { return cDurationUnitDURATION_UNITEnumRuleCall_2_2_0; }
		
		//('from' startDate=Date)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'from'
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }
		
		//startDate=Date
		public Assignment getStartDateAssignment_3_1() { return cStartDateAssignment_3_1; }
		
		//Date
		public RuleCall getStartDateDateParserRuleCall_3_1_0() { return cStartDateDateParserRuleCall_3_1_0; }
		
		//('due' endDate=Date)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'due'
		public Keyword getDueKeyword_4_0() { return cDueKeyword_4_0; }
		
		//endDate=Date
		public Assignment getEndDateAssignment_4_1() { return cEndDateAssignment_4_1; }
		
		//Date
		public RuleCall getEndDateDateParserRuleCall_4_1_0() { return cEndDateDateParserRuleCall_4_1_0; }
		
		//(','? 'depends' 'on' dependency=Dependency)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','?
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'depends'
		public Keyword getDependsKeyword_5_1() { return cDependsKeyword_5_1; }
		
		//'on'
		public Keyword getOnKeyword_5_2() { return cOnKeyword_5_2; }
		
		//dependency=Dependency
		public Assignment getDependencyAssignment_5_3() { return cDependencyAssignment_5_3; }
		
		//Dependency
		public RuleCall getDependencyDependencyParserRuleCall_5_3_0() { return cDependencyDependencyParserRuleCall_5_3_0; }
		
		//('{' subtasks+=AbstractTask (';' subtasks+=AbstractTask)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//subtasks+=AbstractTask
		public Assignment getSubtasksAssignment_6_1() { return cSubtasksAssignment_6_1; }
		
		//AbstractTask
		public RuleCall getSubtasksAbstractTaskParserRuleCall_6_1_0() { return cSubtasksAbstractTaskParserRuleCall_6_1_0; }
		
		//(';' subtasks+=AbstractTask)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6_2_0() { return cSemicolonKeyword_6_2_0; }
		
		//subtasks+=AbstractTask
		public Assignment getSubtasksAssignment_6_2_1() { return cSubtasksAssignment_6_2_1; }
		
		//AbstractTask
		public RuleCall getSubtasksAbstractTaskParserRuleCall_6_2_1_0() { return cSubtasksAbstractTaskParserRuleCall_6_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class MilestoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.Milestone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMilestoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPlannedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndDateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndDateDateParserRuleCall_3_0 = (RuleCall)cEndDateAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cDependsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cOnKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cDependencyAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cDependencyDependencyParserRuleCall_4_3_0 = (RuleCall)cDependencyAssignment_4_3.eContents().get(0);
		
		//Milestone:
		//	'Milestone' name=STRING 'planned' endDate=Date (','? 'depends' 'on' dependency=Dependency)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Milestone' name=STRING 'planned' endDate=Date (','? 'depends' 'on' dependency=Dependency)?
		public Group getGroup() { return cGroup; }
		
		//'Milestone'
		public Keyword getMilestoneKeyword_0() { return cMilestoneKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//'planned'
		public Keyword getPlannedKeyword_2() { return cPlannedKeyword_2; }
		
		//endDate=Date
		public Assignment getEndDateAssignment_3() { return cEndDateAssignment_3; }
		
		//Date
		public RuleCall getEndDateDateParserRuleCall_3_0() { return cEndDateDateParserRuleCall_3_0; }
		
		//(','? 'depends' 'on' dependency=Dependency)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//'depends'
		public Keyword getDependsKeyword_4_1() { return cDependsKeyword_4_1; }
		
		//'on'
		public Keyword getOnKeyword_4_2() { return cOnKeyword_4_2; }
		
		//dependency=Dependency
		public Assignment getDependencyAssignment_4_3() { return cDependencyAssignment_4_3; }
		
		//Dependency
		public RuleCall getDependencyDependencyParserRuleCall_4_3_0() { return cDependencyDependencyParserRuleCall_4_3_0; }
	}
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMasterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMasterAbstractTaskCrossReference_0_0 = (CrossReference)cMasterAssignment_0.eContents().get(0);
		private final RuleCall cMasterAbstractTaskSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cMasterAbstractTaskCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMasterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cMasterAbstractTaskCrossReference_1_1_0 = (CrossReference)cMasterAssignment_1_1.eContents().get(0);
		private final RuleCall cMasterAbstractTaskSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cMasterAbstractTaskCrossReference_1_1_0.eContents().get(1);
		
		////((',')? 'depends' 'on' dependenciesAsDependant+=Dependency (','  dependenciesAsDependant+=Dependency)*)?;
		////separate entity because it's going to be extended with extra characteristics, not just task by itself
		//Dependency:
		//	master+=[AbstractTask|STRING] (',' master+=[AbstractTask|STRING])*
		//	//dependee=[AbstractTask|STRING]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//master+=[AbstractTask|STRING] (',' master+=[AbstractTask|STRING])*
		public Group getGroup() { return cGroup; }
		
		//master+=[AbstractTask|STRING]
		public Assignment getMasterAssignment_0() { return cMasterAssignment_0; }
		
		//[AbstractTask|STRING]
		public CrossReference getMasterAbstractTaskCrossReference_0_0() { return cMasterAbstractTaskCrossReference_0_0; }
		
		//STRING
		public RuleCall getMasterAbstractTaskSTRINGTerminalRuleCall_0_0_1() { return cMasterAbstractTaskSTRINGTerminalRuleCall_0_0_1; }
		
		//(',' master+=[AbstractTask|STRING])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//master+=[AbstractTask|STRING]
		public Assignment getMasterAssignment_1_1() { return cMasterAssignment_1_1; }
		
		//[AbstractTask|STRING]
		public CrossReference getMasterAbstractTaskCrossReference_1_1_0() { return cMasterAbstractTaskCrossReference_1_1_0; }
		
		//STRING
		public RuleCall getMasterAbstractTaskSTRINGTerminalRuleCall_1_1_0_1() { return cMasterAbstractTaskSTRINGTerminalRuleCall_1_1_0_1; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Date ecore::EDate:
		//	INT+ '.' INT+ '.' INT+;
		@Override public ParserRule getRule() { return rule; }
		
		//INT+ '.' INT+ '.' INT+
		public Group getGroup() { return cGroup; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	
	public class DURATION_UNITElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "tdt4250.ganttproject.Gpx.DURATION_UNIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDAYDayKeyword_0_0 = (Keyword)cDAYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDAYDaysKeyword_1_0 = (Keyword)cDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEEKWeekKeyword_2_0 = (Keyword)cWEEKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEEKWeeksKeyword_3_0 = (Keyword)cWEEKEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DURATION_UNIT:
		//	DAY='day' | DAY='days' | WEEK='week' | WEEK='weeks';
		public EnumRule getRule() { return rule; }
		
		//DAY='day' | DAY='days' | WEEK='week' | WEEK='weeks'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DAY='day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_0() { return cDAYEnumLiteralDeclaration_0; }
		
		//'day'
		public Keyword getDAYDayKeyword_0_0() { return cDAYDayKeyword_0_0; }
		
		//DAY='days'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_1() { return cDAYEnumLiteralDeclaration_1; }
		
		//'days'
		public Keyword getDAYDaysKeyword_1_0() { return cDAYDaysKeyword_1_0; }
		
		//WEEK='week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_2() { return cWEEKEnumLiteralDeclaration_2; }
		
		//'week'
		public Keyword getWEEKWeekKeyword_2_0() { return cWEEKWeekKeyword_2_0; }
		
		//WEEK='weeks'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_3() { return cWEEKEnumLiteralDeclaration_3; }
		
		//'weeks'
		public Keyword getWEEKWeeksKeyword_3_0() { return cWEEKWeeksKeyword_3_0; }
	}
	
	private final ProjectElements pProject;
	private final AbstractTaskElements pAbstractTask;
	private final TaskElements pTask;
	private final MilestoneElements pMilestone;
	private final DependencyElements pDependency;
	private final DURATION_UNITElements eDURATION_UNIT;
	private final DateElements pDate;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GpxGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pAbstractTask = new AbstractTaskElements();
		this.pTask = new TaskElements();
		this.pMilestone = new MilestoneElements();
		this.pDependency = new DependencyElements();
		this.eDURATION_UNIT = new DURATION_UNITElements();
		this.pDate = new DateElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tdt4250.ganttproject.Gpx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//	'Project' name=STRING (tasks+=AbstractTask (';' tasks+=AbstractTask)*)?;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//AbstractTask:
	//	Task | Milestone;
	public AbstractTaskElements getAbstractTaskAccess() {
		return pAbstractTask;
	}
	
	public ParserRule getAbstractTaskRule() {
		return getAbstractTaskAccess().getRule();
	}
	
	//Task:
	//	'Task' name=STRING ('lasts' duration=INT durationUnit=DURATION_UNIT)? ('from' startDate=Date)? ('due' endDate=Date)?
	//	(','? 'depends' 'on' dependency=Dependency)? ('{'
	//	subtasks+=AbstractTask (';' subtasks+=AbstractTask)*
	//	'}')?;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Milestone:
	//	'Milestone' name=STRING 'planned' endDate=Date (','? 'depends' 'on' dependency=Dependency)?;
	public MilestoneElements getMilestoneAccess() {
		return pMilestone;
	}
	
	public ParserRule getMilestoneRule() {
		return getMilestoneAccess().getRule();
	}
	
	////((',')? 'depends' 'on' dependenciesAsDependant+=Dependency (','  dependenciesAsDependant+=Dependency)*)?;
	////separate entity because it's going to be extended with extra characteristics, not just task by itself
	//Dependency:
	//	master+=[AbstractTask|STRING] (',' master+=[AbstractTask|STRING])*
	//	//dependee=[AbstractTask|STRING]
	//;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//enum DURATION_UNIT:
	//	DAY='day' | DAY='days' | WEEK='week' | WEEK='weeks';
	public DURATION_UNITElements getDURATION_UNITAccess() {
		return eDURATION_UNIT;
	}
	
	public EnumRule getDURATION_UNITRule() {
		return getDURATION_UNITAccess().getRule();
	}
	
	//Date ecore::EDate:
	//	INT+ '.' INT+ '.' INT+;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
