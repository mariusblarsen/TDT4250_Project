/*
 * generated by Xtext 2.23.0
 */
package tdt4250.ganttproject.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import tdt4250.ganttproject.gpx.Project
import tdt4250.ganttproject.gpx.DURATION_UNIT
import tdt4250.ganttproject.gpx.Task
import tdt4250.ganttproject.gpx.Milestone
import java.util.Date
import tdt4250.ganttproject.gpx.GpxPackage
import org.eclipse.xtext.validation.IResourceValidator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.validation.Issue
import java.util.List
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.util.CancelIndicator

@ExtendWith(InjectionExtension)
@InjectWith(GpxInjectorProvider)
class GpxParsingTest {
	@Inject
	ParseHelper<Project> parseHelper
	
	@Inject
	IResourceValidator resourceValidator
		
	@Test
	def void loadModel() {
		GpxPackage.eINSTANCE.eClass
		val result = parseHelper.parse('''
Project 'MyProject'

Task 'Task_1'{
	Task 'Task1_1' lasts 5 days from 10.11.20;
	Task 'Task1_2' lasts 1 day, depends on 'Task1_1'
};
Task 'Task_2' lasts 10 days, depends on 'Task_2';
Milestone 'Phase_1' planned 27.11.20, depends on 'Task_2';
Task 'Task_3' depends on 'Phase_1'{
	Task 'Task 3_1' from 29.11.20 due 30.11.20;
	Task 'Task3_2' lasts 1 day;
	Task 'Task3_3' lasts 1 week, depends on 'Task 3_1', 'Task_1'
};
Task 'Task_4' lasts 10 days, depends on 'Task 3_1'
		''')
		Assertions.assertNotNull(result)
		Assertions.assertEquals("MyProject", result.name)
		Assertions.assertEquals(5, result.tasks.size)
		
		Assertions.assertTrue(result.tasks.get(2) instanceof Milestone)
		Assertions.assertTrue(result.tasks.get(3) instanceof Task)
			
		val task1 = result.tasks.get(0) as Task
		Assertions.assertEquals(2, task1.subtasks.size)
		
		val milestone1 = result.tasks.get(2) as Milestone
		Assertions.assertNotNull(milestone1.endDate)
		
		val task3 = result.tasks.get(3) as Task
		
		Assertions.assertEquals(3, task3.subtasks.size)
		Assertions.assertSame(milestone1, task3.dependency.dependees.get(0))
		
		val task31 = task3.subtasks.get(0) as Task
		val task32 = task3.subtasks.get(1) as Task
		val task33 = task3.subtasks.get(2) as Task
		
		var testDate = new Date(120, 10, 29)
		
		Assertions.assertEquals(testDate, task31.startDate)
		//Assertions.assertEquals('30.11.20', task31.endDate)
		Assertions.assertEquals(1, task32.duration)
		Assertions.assertEquals(DURATION_UNIT.DAY, task32.durationUnit)
		Assertions.assertEquals(1, task33.duration)
		Assertions.assertEquals(DURATION_UNIT.WEEK, task33.durationUnit)
		Assertions.assertEquals(2, task33.dependency.dependees.size)
		Assertions.assertSame(task31, task33.dependency.dependees.get(0))
		Assertions.assertSame(task1, task33.dependency.dependees.get(1))
		
		
		val errors = result.eResource.errors
		if (errors.isEmpty)
			System.out.println("All good! (y)")
		else
			System.out.println(errors)
			
		val List<Issue> issues = resourceValidator.validate(result.eResource,
            CheckMode.ALL, CancelIndicator.NullImpl);
        for (Issue issue: issues) {
            System.out.println(issue.severity + ":" + issue.message + "(line: " + issue.lineNumber + ")");
        }
        //Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}

}
