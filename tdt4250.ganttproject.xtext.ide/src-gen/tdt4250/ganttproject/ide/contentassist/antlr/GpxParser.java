/*
 * generated by Xtext 2.23.0
 */
package tdt4250.ganttproject.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import tdt4250.ganttproject.ide.contentassist.antlr.internal.InternalGpxParser;
import tdt4250.ganttproject.services.GpxGrammarAccess;

public class GpxParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GpxGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GpxGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractTaskAccess().getAlternatives(), "rule__AbstractTask__Alternatives");
			builder.put(grammarAccess.getDURATION_UNITAccess().getAlternatives(), "rule__DURATION_UNIT__Alternatives");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_2(), "rule__Project__Group_2__0");
			builder.put(grammarAccess.getProjectAccess().getGroup_2_1(), "rule__Project__Group_2_1__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_2(), "rule__Task__Group_2__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_3(), "rule__Task__Group_3__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_4(), "rule__Task__Group_4__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_5(), "rule__Task__Group_5__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_6(), "rule__Task__Group_6__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_6_2(), "rule__Task__Group_6_2__0");
			builder.put(grammarAccess.getMilestoneAccess().getGroup(), "rule__Milestone__Group__0");
			builder.put(grammarAccess.getMilestoneAccess().getGroup_4(), "rule__Milestone__Group_4__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup_1(), "rule__Dependency__Group_1__0");
			builder.put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
			builder.put(grammarAccess.getProjectAccess().getNameAssignment_1(), "rule__Project__NameAssignment_1");
			builder.put(grammarAccess.getProjectAccess().getTasksAssignment_2_0(), "rule__Project__TasksAssignment_2_0");
			builder.put(grammarAccess.getProjectAccess().getTasksAssignment_2_1_1(), "rule__Project__TasksAssignment_2_1_1");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getDurationAssignment_2_1(), "rule__Task__DurationAssignment_2_1");
			builder.put(grammarAccess.getTaskAccess().getDurationUnitAssignment_2_2(), "rule__Task__DurationUnitAssignment_2_2");
			builder.put(grammarAccess.getTaskAccess().getStartDateAssignment_3_1(), "rule__Task__StartDateAssignment_3_1");
			builder.put(grammarAccess.getTaskAccess().getEndDateAssignment_4_1(), "rule__Task__EndDateAssignment_4_1");
			builder.put(grammarAccess.getTaskAccess().getDependencyAssignment_5_3(), "rule__Task__DependencyAssignment_5_3");
			builder.put(grammarAccess.getTaskAccess().getSubtasksAssignment_6_1(), "rule__Task__SubtasksAssignment_6_1");
			builder.put(grammarAccess.getTaskAccess().getSubtasksAssignment_6_2_1(), "rule__Task__SubtasksAssignment_6_2_1");
			builder.put(grammarAccess.getMilestoneAccess().getNameAssignment_1(), "rule__Milestone__NameAssignment_1");
			builder.put(grammarAccess.getMilestoneAccess().getEndDateAssignment_3(), "rule__Milestone__EndDateAssignment_3");
			builder.put(grammarAccess.getMilestoneAccess().getDependencyAssignment_4_3(), "rule__Milestone__DependencyAssignment_4_3");
			builder.put(grammarAccess.getDependencyAccess().getDependeesAssignment_0(), "rule__Dependency__DependeesAssignment_0");
			builder.put(grammarAccess.getDependencyAccess().getDependeesAssignment_1_1(), "rule__Dependency__DependeesAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GpxGrammarAccess grammarAccess;

	@Override
	protected InternalGpxParser createParser() {
		InternalGpxParser result = new InternalGpxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GpxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GpxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
